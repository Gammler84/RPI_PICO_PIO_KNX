// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// knx_tx //
// ------ //

#define knx_tx_wrap_target 0
#define knx_tx_wrap 12

static const uint16_t knx_tx_program_instructions[] = {
            //     .wrap_target
    0x90a0, //  0: pull   block           side 0     
    0xf020, //  1: set    x, 0            side 0     
    0x1804, //  2: jmp    4               side 1     
    0xa009, //  3: mov    pins, !x                   
    0x4001, //  4: in     pins, 1                    
    0xa046, //  5: mov    y, isr                     
    0x10a9, //  6: jmp    x != y, 9       side 0     
    0xd000, //  7: irq    nowait 0        side 0     
    0x100c, //  8: jmp    12              side 0     
    0x7021, //  9: out    x, 1            side 0     
    0x5060, // 10: in     null, 32        side 0     
    0x12e3, // 11: jmp    !osre, 3        side 0 [2] 
    0x3640, // 12: wait   0 irq, 0        side 0 [6] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program knx_tx_program = {
    .instructions = knx_tx_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config knx_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + knx_tx_wrap_target, offset + knx_tx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}


#include "hardware/clocks.h"
static inline void knx_tx_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint pin_rx, uint baud) {
    // Tell PIO to initially drive output-high on the selected pin, then map PIO
    // onto that pin with the IO muxes.


    pio_sm_config c = knx_tx_program_get_default_config(offset);
    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 10);
    sm_config_set_in_shift(&c, false, false, 10);
    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)
    sm_config_set_out_pins(&c, pin_tx, 1);
    sm_config_set_in_pins(&c, pin_rx);
    sm_config_set_sideset_pins(&c, pin_tx);
    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // SM transmits 1 bit per 9 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (9 * baud);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void knx_tx_program_putc(PIO pio, uint sm, char c) {
    uint32_t parity = c ^ (c >> 1);
    parity = parity ^ (parity >> 2);
    parity = parity ^ (parity >> 4);
    uint32_t byte = (uint32_t)c | 0x200 | ((parity << 8) & 0x100);    //Add Stop Bit and even parity
    //Serial.print("TX Parity: ");
    //Serial.print(parity & 0x1);
    //Serial.println("");
    pio_sm_put(pio, sm, byte);
}

static inline bool knx_tx_get_irq(PIO pio, uint irq_nr) {
    return pio_interrupt_get(pio, irq_nr);
}

static inline void knx_tx_clr_irq(PIO pio, uint irq_nr) {
    pio_interrupt_clear(pio, irq_nr);
}

#endif

// ------ //
// knx_rx //
// ------ //
#define knx_rx_wrap_target 0
#define knx_rx_wrap 9

static const uint16_t knx_rx_program_instructions[] = {
            //     .wrap_target
    0x20a0, //  0: wait   1 pin, 0                   
    0xe828, //  1: set    x, 8                   [8] 
    0x4001, //  2: in     pins, 1                    
    0x0742, //  3: jmp    x--, 2                 [7] 
    0x00c8, //  4: jmp    pin, 8                     
    0xa0ce, //  5: mov    isr, !isr                  
    0x8020, //  6: push   block                      
    0x0000, //  7: jmp    0                          
    0xc001, //  8: irq    nowait 1                   
    0x2041, //  9: wait   0 irq, 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program knx_rx_program = {
    .instructions = knx_rx_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config knx_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + knx_rx_wrap_target, offset + knx_rx_wrap);
    return c;
}


static inline void knx_rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
    //pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    //pio_sm_set_pindirs_with_mask(pio, sm, 0, 1u << pin);
    //pio_gpio_init(pio, pin);
    //gpio_pull_up(pin);
    pio_sm_config c = knx_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Shift to right, autopush disabled
    sm_config_set_in_shift(&c, true, false, 9);
    // Deeper FIFO as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 12 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (9 * baud);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline char knx_rx_program_getc(PIO pio, uint sm) {
    // 8-bit read from the uppermost byte of the FIFO, as data is left-justified
    io_rw_8 *rxfifo_shift = (io_rw_8*)&pio->rxf[sm] + 3;
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (uint32_t)*rxfifo_shift;
}

static inline char knx_rx_program_get_char(PIO pio, uint sm) {
    // 8-bit read from the uppermost byte of the FIFO, as data is left-justified
    
    //uint32_t rxfifo_shift = (uint32_t)pio->rxf[sm];
    while (pio_sm_is_rx_fifo_empty(pio, sm)){
        tight_loop_contents();
        if( knx_tx_get_irq(pio0, 1)){
            knx_tx_clr_irq(pio0, 1);
            Serial.println("IRQ RX Rised");
            break;
        } 
    }
    uint32_t rxfifo_shift = pio_sm_get(pio, sm);
    
    char rx = ((rxfifo_shift) >> 23) & 0xFF;
    uint32_t parity_bit = ((rxfifo_shift) >> 31 ) & 0x01;
    uint32_t parity = rx ^ (rx >> 1);
    parity = parity ^ (parity >> 2);
    parity = (parity ^ (parity >> 4)) & 0x1;

    //Serial.print("RX: ");
    //Serial.print(rx);
    //Serial.print(" P: ");
    //Serial.print(parity_bit);
    //Serial.println("");
    if(parity_bit == parity)
        return rx;
    else
        return 0x00;
}



#endif
